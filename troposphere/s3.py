# Copyright (c) 2012-2021, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 51.0.0


from . import AWSObject, AWSProperty, Tags
from .validators import boolean, double, integer
from .validators.s3 import AuthenticatedRead  # noqa: F401
from .validators.s3 import BucketOwnerFullControl  # noqa: F401
from .validators.s3 import BucketOwnerRead  # noqa: F401
from .validators.s3 import LogDeliveryWrite  # noqa: F401
from .validators.s3 import Private  # noqa: F401
from .validators.s3 import PublicRead  # noqa: F401
from .validators.s3 import PublicReadWrite  # noqa: F401
from .validators.s3 import (
    policytypes,
    s3_transfer_acceleration_status,
    validate_bucket,
    validate_lifecycle_rule,
    validate_s3_bucket_name,
)


class PublicAccessBlockConfiguration(AWSProperty):
    """
    `PublicAccessBlockConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-multiregionaccesspoint-publicaccessblockconfiguration.html>`_
    """

    props = {
        "BlockPublicAcls": (boolean, False),
        "BlockPublicPolicy": (boolean, False),
        "IgnorePublicAcls": (boolean, False),
        "RestrictPublicBuckets": (boolean, False),
    }


class VpcConfiguration(AWSProperty):
    """
    `VpcConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-accesspoint-vpcconfiguration.html>`_
    """

    props = {
        "VpcId": (str, False),
    }


class AccessPoint(AWSObject):
    """
    `AccessPoint <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-accesspoint.html>`_
    """

    resource_type = "AWS::S3::AccessPoint"

    props = {
        "Bucket": (str, True),
        "Name": (str, False),
        "Policy": (policytypes, False),
        "PolicyStatus": (dict, False),
        "PublicAccessBlockConfiguration": (PublicAccessBlockConfiguration, False),
        "VpcConfiguration": (VpcConfiguration, False),
    }


class AccelerateConfiguration(AWSProperty):
    """
    `AccelerateConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-accelerateconfiguration.html>`_
    """

    props = {
        "AccelerationStatus": (s3_transfer_acceleration_status, True),
    }


class Destination(AWSProperty):
    """
    `Destination <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-destination.html>`_
    """

    props = {
        "BucketAccountId": (str, False),
        "BucketArn": (str, True),
        "Format": (str, True),
        "Prefix": (str, False),
    }


class DataExport(AWSProperty):
    """
    `DataExport <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-dataexport.html>`_
    """

    props = {
        "Destination": (Destination, True),
        "OutputSchemaVersion": (str, True),
    }


class StorageClassAnalysis(AWSProperty):
    """
    `StorageClassAnalysis <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-storageclassanalysis.html>`_
    """

    props = {
        "DataExport": (DataExport, False),
    }


class TagFilter(AWSProperty):
    """
    `TagFilter <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-tagfilter.html>`_
    """

    props = {
        "Key": (str, True),
        "Value": (str, True),
    }


class AnalyticsConfiguration(AWSProperty):
    """
    `AnalyticsConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-analyticsconfiguration.html>`_
    """

    props = {
        "Id": (str, True),
        "Prefix": (str, False),
        "StorageClassAnalysis": (StorageClassAnalysis, True),
        "TagFilters": ([TagFilter], False),
    }


class ServerSideEncryptionByDefault(AWSProperty):
    """
    `ServerSideEncryptionByDefault <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-serversideencryptionbydefault.html>`_
    """

    props = {
        "KMSMasterKeyID": (str, False),
        "SSEAlgorithm": (str, True),
    }


class ServerSideEncryptionRule(AWSProperty):
    """
    `ServerSideEncryptionRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-serversideencryptionrule.html>`_
    """

    props = {
        "BucketKeyEnabled": (boolean, False),
        "ServerSideEncryptionByDefault": (ServerSideEncryptionByDefault, False),
    }


class BucketEncryption(AWSProperty):
    """
    `BucketEncryption <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-bucketencryption.html>`_
    """

    props = {
        "ServerSideEncryptionConfiguration": ([ServerSideEncryptionRule], True),
    }


class CorsRules(AWSProperty):
    """
    `CorsRules <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-cors-corsrule.html>`_
    """

    props = {
        "AllowedHeaders": ([str], False),
        "AllowedMethods": ([str], True),
        "AllowedOrigins": ([str], True),
        "ExposedHeaders": ([str], False),
        "Id": (str, False),
        "MaxAge": (integer, False),
    }


class CorsConfiguration(AWSProperty):
    """
    `CorsConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-cors.html>`_
    """

    props = {
        "CorsRules": ([CorsRules], True),
    }


class Tiering(AWSProperty):
    """
    `Tiering <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-tiering.html>`_
    """

    props = {
        "AccessTier": (str, True),
        "Days": (integer, True),
    }


class IntelligentTieringConfiguration(AWSProperty):
    """
    `IntelligentTieringConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-intelligenttieringconfiguration.html>`_
    """

    props = {
        "Id": (str, True),
        "Prefix": (str, False),
        "Status": (str, True),
        "TagFilters": ([TagFilter], False),
        "Tierings": ([Tiering], True),
    }


class InventoryConfiguration(AWSProperty):
    """
    `InventoryConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-inventoryconfiguration.html>`_
    """

    props = {
        "Destination": (Destination, True),
        "Enabled": (boolean, True),
        "Id": (str, True),
        "IncludedObjectVersions": (str, True),
        "OptionalFields": ([str], False),
        "Prefix": (str, False),
        "ScheduleFrequency": (str, True),
    }


class AbortIncompleteMultipartUpload(AWSProperty):
    """
    `AbortIncompleteMultipartUpload <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-abortincompletemultipartupload.html>`_
    """

    props = {
        "DaysAfterInitiation": (integer, True),
    }


class LifecycleRuleTransition(AWSProperty):
    """
    `LifecycleRuleTransition <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule-transition.html>`_
    """

    props = {
        "StorageClass": (str, True),
        "TransitionDate": (str, False),
        "TransitionInDays": (integer, False),
    }


class NoncurrentVersionExpiration(AWSProperty):
    """
    `NoncurrentVersionExpiration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule-noncurrentversionexpiration.html>`_
    """

    props = {
        "NewerNoncurrentVersions": (integer, False),
        "NoncurrentDays": (integer, True),
    }


class NoncurrentVersionTransition(AWSProperty):
    """
    `NoncurrentVersionTransition <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule-noncurrentversiontransition.html>`_
    """

    props = {
        "NewerNoncurrentVersions": (integer, False),
        "StorageClass": (str, True),
        "TransitionInDays": (integer, True),
    }


class LifecycleRule(AWSProperty):
    """
    `LifecycleRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig-rule.html>`_
    """

    props = {
        "AbortIncompleteMultipartUpload": (AbortIncompleteMultipartUpload, False),
        "ExpirationDate": (str, False),
        "ExpirationInDays": (integer, False),
        "ExpiredObjectDeleteMarker": (boolean, False),
        "Id": (str, False),
        "NoncurrentVersionExpiration": (NoncurrentVersionExpiration, False),
        "NoncurrentVersionExpirationInDays": (integer, False),
        "NoncurrentVersionTransition": (NoncurrentVersionTransition, False),
        "NoncurrentVersionTransitions": ([NoncurrentVersionTransition], False),
        "ObjectSizeGreaterThan": (integer, False),
        "ObjectSizeLessThan": (integer, False),
        "Prefix": (str, False),
        "Status": (str, True),
        "TagFilters": ([TagFilter], False),
        "Transition": (LifecycleRuleTransition, False),
        "Transitions": ([LifecycleRuleTransition], False),
    }

    def validate(self):
        validate_lifecycle_rule(self)


class LifecycleConfiguration(AWSProperty):
    """
    `LifecycleConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-lifecycleconfig.html>`_
    """

    props = {
        "Rules": ([LifecycleRule], True),
    }


class LoggingConfiguration(AWSProperty):
    """
    `LoggingConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-loggingconfig.html>`_
    """

    props = {
        "DestinationBucketName": (validate_s3_bucket_name, False),
        "LogFilePrefix": (str, False),
    }


class MetricsConfiguration(AWSProperty):
    """
    `MetricsConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-metricsconfiguration.html>`_
    """

    props = {
        "AccessPointArn": (str, False),
        "Id": (str, True),
        "Prefix": (str, False),
        "TagFilters": ([TagFilter], False),
    }


class EventBridgeConfiguration(AWSProperty):
    """
    `EventBridgeConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfig-eventbridgeconfig.html>`_
    """

    props = {
        "EventBridgeEnabled": (boolean, False),
    }


class Rules(AWSProperty):
    """
    `Rules <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfiguration-config-filter-s3key-rules.html>`_
    """

    props = {
        "Name": (str, True),
        "Value": (str, True),
    }


class S3Key(AWSProperty):
    """
    `S3Key <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfiguration-config-filter-s3key.html>`_
    """

    props = {
        "Rules": ([Rules], True),
    }


class Filter(AWSProperty):
    """
    `Filter <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfiguration-config-filter.html>`_
    """

    props = {
        "S3Key": (S3Key, True),
    }


class LambdaConfigurations(AWSProperty):
    """
    `LambdaConfigurations <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfig-lambdaconfig.html>`_
    """

    props = {
        "Event": (str, True),
        "Filter": (Filter, False),
        "Function": (str, True),
    }


class QueueConfigurations(AWSProperty):
    """
    `QueueConfigurations <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfig-queueconfig.html>`_
    """

    props = {
        "Event": (str, True),
        "Filter": (Filter, False),
        "Queue": (str, True),
    }


class TopicConfigurations(AWSProperty):
    """
    `TopicConfigurations <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfig-topicconfig.html>`_
    """

    props = {
        "Event": (str, True),
        "Filter": (Filter, False),
        "Topic": (str, True),
    }


class NotificationConfiguration(AWSProperty):
    """
    `NotificationConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-notificationconfig.html>`_
    """

    props = {
        "EventBridgeConfiguration": (EventBridgeConfiguration, False),
        "LambdaConfigurations": ([LambdaConfigurations], False),
        "QueueConfigurations": ([QueueConfigurations], False),
        "TopicConfigurations": ([TopicConfigurations], False),
    }


class DefaultRetention(AWSProperty):
    """
    `DefaultRetention <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-defaultretention.html>`_
    """

    props = {
        "Days": (integer, False),
        "Mode": (str, False),
        "Years": (integer, False),
    }


class ObjectLockRule(AWSProperty):
    """
    `ObjectLockRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockrule.html>`_
    """

    props = {
        "DefaultRetention": (DefaultRetention, False),
    }


class ObjectLockConfiguration(AWSProperty):
    """
    `ObjectLockConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-objectlockconfiguration.html>`_
    """

    props = {
        "ObjectLockEnabled": (str, False),
        "Rule": (ObjectLockRule, False),
    }


class OwnershipControlsRule(AWSProperty):
    """
    `OwnershipControlsRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrolsrule.html>`_
    """

    props = {
        "ObjectOwnership": (str, False),
    }


class OwnershipControls(AWSProperty):
    """
    `OwnershipControls <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ownershipcontrols.html>`_
    """

    props = {
        "Rules": ([OwnershipControlsRule], True),
    }


class DeleteMarkerReplication(AWSProperty):
    """
    `DeleteMarkerReplication <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-deletemarkerreplication.html>`_
    """

    props = {
        "Status": (str, False),
    }


class AccessControlTranslation(AWSProperty):
    """
    `AccessControlTranslation <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-accesscontroltranslation.html>`_
    """

    props = {
        "Owner": (str, True),
    }


class EncryptionConfiguration(AWSProperty):
    """
    `EncryptionConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-encryptionconfiguration.html>`_
    """

    props = {
        "ReplicaKmsKeyID": (str, True),
    }


class ReplicationTimeValue(AWSProperty):
    """
    `ReplicationTimeValue <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationtimevalue.html>`_
    """

    props = {
        "Minutes": (integer, True),
    }


class Metrics(AWSProperty):
    """
    `Metrics <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-metrics.html>`_
    """

    props = {
        "EventThreshold": (ReplicationTimeValue, False),
        "Status": (str, True),
    }


class ReplicationTime(AWSProperty):
    """
    `ReplicationTime <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationtime.html>`_
    """

    props = {
        "Status": (str, True),
        "Time": (ReplicationTimeValue, True),
    }


class ReplicationConfigurationRulesDestination(AWSProperty):
    """
    `ReplicationConfigurationRulesDestination <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationconfiguration-rules-destination.html>`_
    """

    props = {
        "AccessControlTranslation": (AccessControlTranslation, False),
        "Account": (str, False),
        "Bucket": (str, True),
        "EncryptionConfiguration": (EncryptionConfiguration, False),
        "Metrics": (Metrics, False),
        "ReplicationTime": (ReplicationTime, False),
        "StorageClass": (str, False),
    }


class ReplicationRuleAndOperator(AWSProperty):
    """
    `ReplicationRuleAndOperator <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationruleandoperator.html>`_
    """

    props = {
        "Prefix": (str, False),
        "TagFilters": ([TagFilter], False),
    }


class ReplicationRuleFilter(AWSProperty):
    """
    `ReplicationRuleFilter <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationrulefilter.html>`_
    """

    props = {
        "And": (ReplicationRuleAndOperator, False),
        "Prefix": (str, False),
        "TagFilter": (TagFilter, False),
    }


class ReplicaModifications(AWSProperty):
    """
    `ReplicaModifications <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicamodifications.html>`_
    """

    props = {
        "Status": (str, True),
    }


class SseKmsEncryptedObjects(AWSProperty):
    """
    `SseKmsEncryptedObjects <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-ssekmsencryptedobjects.html>`_
    """

    props = {
        "Status": (str, True),
    }


class SourceSelectionCriteria(AWSProperty):
    """
    `SourceSelectionCriteria <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-sourceselectioncriteria.html>`_
    """

    props = {
        "ReplicaModifications": (ReplicaModifications, False),
        "SseKmsEncryptedObjects": (SseKmsEncryptedObjects, False),
    }


class ReplicationConfigurationRules(AWSProperty):
    """
    `ReplicationConfigurationRules <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationconfiguration-rules.html>`_
    """

    props = {
        "DeleteMarkerReplication": (DeleteMarkerReplication, False),
        "Destination": (ReplicationConfigurationRulesDestination, True),
        "Filter": (ReplicationRuleFilter, False),
        "Id": (str, False),
        "Prefix": (str, False),
        "Priority": (integer, False),
        "SourceSelectionCriteria": (SourceSelectionCriteria, False),
        "Status": (str, True),
    }


class ReplicationConfiguration(AWSProperty):
    """
    `ReplicationConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-replicationconfiguration.html>`_
    """

    props = {
        "Role": (str, True),
        "Rules": ([ReplicationConfigurationRules], True),
    }


class VersioningConfiguration(AWSProperty):
    """
    `VersioningConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket-versioningconfig.html>`_
    """

    props = {
        "Status": (str, True),
    }


class RedirectAllRequestsTo(AWSProperty):
    """
    `RedirectAllRequestsTo <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-redirectallrequeststo.html>`_
    """

    props = {
        "HostName": (str, True),
        "Protocol": (str, False),
    }


class RedirectRule(AWSProperty):
    """
    `RedirectRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules-redirectrule.html>`_
    """

    props = {
        "HostName": (str, False),
        "HttpRedirectCode": (str, False),
        "Protocol": (str, False),
        "ReplaceKeyPrefixWith": (str, False),
        "ReplaceKeyWith": (str, False),
    }


class RoutingRuleCondition(AWSProperty):
    """
    `RoutingRuleCondition <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules-routingrulecondition.html>`_
    """

    props = {
        "HttpErrorCodeReturnedEquals": (str, False),
        "KeyPrefixEquals": (str, False),
    }


class RoutingRule(AWSProperty):
    """
    `RoutingRule <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration-routingrules.html>`_
    """

    props = {
        "RedirectRule": (RedirectRule, True),
        "RoutingRuleCondition": (RoutingRuleCondition, False),
    }


class WebsiteConfiguration(AWSProperty):
    """
    `WebsiteConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-websiteconfiguration.html>`_
    """

    props = {
        "ErrorDocument": (str, False),
        "IndexDocument": (str, False),
        "RedirectAllRequestsTo": (RedirectAllRequestsTo, False),
        "RoutingRules": ([RoutingRule], False),
    }


class Bucket(AWSObject):
    """
    `Bucket <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-bucket.html>`_
    """

    resource_type = "AWS::S3::Bucket"

    props = {
        "AccelerateConfiguration": (AccelerateConfiguration, False),
        "AccessControl": (str, False),
        "AnalyticsConfigurations": ([AnalyticsConfiguration], False),
        "BucketEncryption": (BucketEncryption, False),
        "BucketName": (validate_s3_bucket_name, False),
        "CorsConfiguration": (CorsConfiguration, False),
        "IntelligentTieringConfigurations": ([IntelligentTieringConfiguration], False),
        "InventoryConfigurations": ([InventoryConfiguration], False),
        "LifecycleConfiguration": (LifecycleConfiguration, False),
        "LoggingConfiguration": (LoggingConfiguration, False),
        "MetricsConfigurations": ([MetricsConfiguration], False),
        "NotificationConfiguration": (NotificationConfiguration, False),
        "ObjectLockConfiguration": (ObjectLockConfiguration, False),
        "ObjectLockEnabled": (boolean, False),
        "OwnershipControls": (OwnershipControls, False),
        "PublicAccessBlockConfiguration": (PublicAccessBlockConfiguration, False),
        "ReplicationConfiguration": (ReplicationConfiguration, False),
        "Tags": (Tags, False),
        "VersioningConfiguration": (VersioningConfiguration, False),
        "WebsiteConfiguration": (WebsiteConfiguration, False),
    }

    def validate(self):
        validate_bucket(self)


class BucketPolicy(AWSObject):
    """
    `BucketPolicy <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-policy.html>`_
    """

    resource_type = "AWS::S3::BucketPolicy"

    props = {
        "Bucket": (str, True),
        "PolicyDocument": (policytypes, True),
    }


class Region(AWSProperty):
    """
    `Region <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-multiregionaccesspoint-region.html>`_
    """

    props = {
        "Bucket": (str, True),
    }


class MultiRegionAccessPoint(AWSObject):
    """
    `MultiRegionAccessPoint <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspoint.html>`_
    """

    resource_type = "AWS::S3::MultiRegionAccessPoint"

    props = {
        "Name": (str, False),
        "PublicAccessBlockConfiguration": (PublicAccessBlockConfiguration, False),
        "Regions": ([Region], True),
    }


class MultiRegionAccessPointPolicy(AWSObject):
    """
    `MultiRegionAccessPointPolicy <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-multiregionaccesspointpolicy.html>`_
    """

    resource_type = "AWS::S3::MultiRegionAccessPointPolicy"

    props = {
        "MrapName": (str, True),
        "Policy": (policytypes, True),
    }


class ActivityMetrics(AWSProperty):
    """
    `ActivityMetrics <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-activitymetrics.html>`_
    """

    props = {
        "IsEnabled": (boolean, False),
    }


class SelectionCriteria(AWSProperty):
    """
    `SelectionCriteria <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-selectioncriteria.html>`_
    """

    props = {
        "Delimiter": (str, False),
        "MaxDepth": (integer, False),
        "MinStorageBytesPercentage": (double, False),
    }


class PrefixLevelStorageMetrics(AWSProperty):
    """
    `PrefixLevelStorageMetrics <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-prefixlevelstoragemetrics.html>`_
    """

    props = {
        "IsEnabled": (boolean, False),
        "SelectionCriteria": (SelectionCriteria, False),
    }


class PrefixLevel(AWSProperty):
    """
    `PrefixLevel <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-prefixlevel.html>`_
    """

    props = {
        "StorageMetrics": (PrefixLevelStorageMetrics, True),
    }


class BucketLevel(AWSProperty):
    """
    `BucketLevel <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-bucketlevel.html>`_
    """

    props = {
        "ActivityMetrics": (ActivityMetrics, False),
        "PrefixLevel": (PrefixLevel, False),
    }


class AccountLevel(AWSProperty):
    """
    `AccountLevel <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-accountlevel.html>`_
    """

    props = {
        "ActivityMetrics": (ActivityMetrics, False),
        "BucketLevel": (BucketLevel, True),
    }


class AwsOrg(AWSProperty):
    """
    `AwsOrg <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-awsorg.html>`_
    """

    props = {
        "Arn": (str, True),
    }


class BucketsAndRegions(AWSProperty):
    """
    `BucketsAndRegions <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-bucketsandregions.html>`_
    """

    props = {
        "Buckets": ([str], False),
        "Regions": ([str], False),
    }


class CloudWatchMetrics(AWSProperty):
    """
    `CloudWatchMetrics <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-cloudwatchmetrics.html>`_
    """

    props = {
        "IsEnabled": (boolean, True),
    }


class S3BucketDestination(AWSProperty):
    """
    `S3BucketDestination <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-s3bucketdestination.html>`_
    """

    props = {
        "AccountId": (str, True),
        "Arn": (str, True),
        "Encryption": (dict, False),
        "Format": (str, True),
        "OutputSchemaVersion": (str, True),
        "Prefix": (str, False),
    }


class StorageLensDataExport(AWSProperty):
    """
    `StorageLensDataExport <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-dataexport.html>`_
    """

    props = {
        "CloudWatchMetrics": (CloudWatchMetrics, False),
        "S3BucketDestination": (S3BucketDestination, False),
    }


class StorageLensConfiguration(AWSProperty):
    """
    `StorageLensConfiguration <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-properties-s3-storagelens-storagelensconfiguration.html>`_
    """

    props = {
        "AccountLevel": (AccountLevel, True),
        "AwsOrg": (AwsOrg, False),
        "DataExport": (StorageLensDataExport, False),
        "Exclude": (BucketsAndRegions, False),
        "Id": (str, True),
        "Include": (BucketsAndRegions, False),
        "IsEnabled": (boolean, True),
        "StorageLensArn": (str, False),
    }


class StorageLens(AWSObject):
    """
    `StorageLens <http://docs.aws.amazon.com/AWSCloudFormation/latest/UserGuide/aws-resource-s3-storagelens.html>`_
    """

    resource_type = "AWS::S3::StorageLens"

    props = {
        "StorageLensConfiguration": (StorageLensConfiguration, True),
        "Tags": (Tags, False),
    }
