# Copyright (c) 2012-2021, Mark Peek <mark@peek.org>
# All rights reserved.
#
# See LICENSE file for full license.
#
# *** Do not modify - this file is autogenerated ***
# Resource specification version: 51.0.0


from . import AWSObject, AWSProperty, Tags
from .validators import boolean, double, integer


class MetricGoalObject(AWSProperty):
    props = {
        "DesiredChange": (str, True),
        "EntityIdKey": (str, True),
        "EventPattern": (str, True),
        "MetricName": (str, True),
        "UnitLabel": (str, False),
        "ValueKey": (str, True),
    }


class TreatmentToWeight(AWSProperty):
    props = {
        "SplitWeight": (integer, True),
        "Treatment": (str, True),
    }


class OnlineAbConfigObject(AWSProperty):
    props = {
        "ControlTreatmentName": (str, False),
        "TreatmentWeights": ([TreatmentToWeight], False),
    }


class TreatmentObject(AWSProperty):
    props = {
        "Description": (str, False),
        "Feature": (str, True),
        "TreatmentName": (str, True),
        "Variation": (str, True),
    }


class Experiment(AWSObject):
    resource_type = "AWS::Evidently::Experiment"

    props = {
        "Description": (str, False),
        "MetricGoals": ([MetricGoalObject], True),
        "Name": (str, True),
        "OnlineAbConfig": (OnlineAbConfigObject, True),
        "Project": (str, True),
        "RandomizationSalt": (str, False),
        "SamplingRate": (integer, False),
        "Tags": (Tags, False),
        "Treatments": ([TreatmentObject], True),
    }


class EntityOverride(AWSProperty):
    props = {
        "EntityId": (str, False),
        "Variation": (str, False),
    }


class VariationObject(AWSProperty):
    props = {
        "BooleanValue": (boolean, False),
        "DoubleValue": (double, False),
        "LongValue": (double, False),
        "StringValue": (str, False),
        "VariationName": (str, False),
    }


class Feature(AWSObject):
    resource_type = "AWS::Evidently::Feature"

    props = {
        "DefaultVariation": (str, False),
        "Description": (str, False),
        "EntityOverrides": ([EntityOverride], False),
        "EvaluationStrategy": (str, False),
        "Name": (str, True),
        "Project": (str, True),
        "Tags": (Tags, False),
        "Variations": ([VariationObject], True),
    }


class LaunchGroupObject(AWSProperty):
    props = {
        "Description": (str, False),
        "Feature": (str, True),
        "GroupName": (str, True),
        "Variation": (str, True),
    }


class MetricDefinitionObject(AWSProperty):
    props = {
        "EntityIdKey": (str, True),
        "EventPattern": (str, True),
        "MetricName": (str, True),
        "UnitLabel": (str, False),
        "ValueKey": (str, True),
    }


class GroupToWeight(AWSProperty):
    props = {
        "GroupName": (str, True),
        "SplitWeight": (integer, True),
    }


class StepConfig(AWSProperty):
    props = {
        "GroupWeights": ([GroupToWeight], True),
        "StartTime": (str, True),
    }


class Launch(AWSObject):
    resource_type = "AWS::Evidently::Launch"

    props = {
        "Description": (str, False),
        "Groups": ([LaunchGroupObject], True),
        "MetricMonitors": ([MetricDefinitionObject], False),
        "Name": (str, True),
        "Project": (str, True),
        "RandomizationSalt": (str, False),
        "ScheduledSplitsConfig": ([StepConfig], True),
        "Tags": (Tags, False),
    }


class S3Destination(AWSProperty):
    props = {
        "BucketName": (str, True),
        "Prefix": (str, False),
    }


class DataDeliveryObject(AWSProperty):
    props = {
        "LogGroup": (str, False),
        "S3": (S3Destination, False),
    }


class Project(AWSObject):
    resource_type = "AWS::Evidently::Project"

    props = {
        "DataDelivery": (DataDeliveryObject, False),
        "Description": (str, False),
        "Name": (str, True),
        "Tags": (Tags, False),
    }
